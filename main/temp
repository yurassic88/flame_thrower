case ESP_GATTC_SEARCH_CMPL_EVT:
        if (p_data->search_cmpl.status != ESP_GATT_OK){
            ESP_LOGE(GATTC_TAG, "search service failed, error status = %x", p_data->search_cmpl.status);
            break;
        }
        if(p_data->search_cmpl.searched_service_source == ESP_GATT_SERVICE_FROM_REMOTE_DEVICE) {
            ESP_LOGI(GATTC_TAG, "Get service information from remote device");
        } else if (p_data->search_cmpl.searched_service_source == ESP_GATT_SERVICE_FROM_NVS_FLASH) {
            ESP_LOGI(GATTC_TAG, "Get service information from flash");
        } else {
            ESP_LOGI(GATTC_TAG, "unknown service source");
        }
        ESP_LOGI(GATTC_TAG, "ESP_GATTC_SEARCH_CMPL_EVT");
        if (get_server){
            uint16_t count = 0;
            esp_gatt_status_t status = esp_ble_gattc_get_attr_count( gattc_if,
                                                                     p_data->search_cmpl.conn_id,
                                                                     ESP_GATT_DB_CHARACTERISTIC,
                                                                     gl_profile_tab[PROFILE_A_APP_ID].service_start_handle,
                                                                     gl_profile_tab[PROFILE_A_APP_ID].service_end_handle,
                                                                     INVALID_HANDLE,
                                                                     &count);
            if (status != ESP_GATT_OK){
                ESP_LOGE(GATTC_TAG, "esp_ble_gattc_get_attr_count error");
            }

            if (count > 0){
                ESP_LOGI(GATTC_TAG, "esp_ble_gattc_get_attr_count>0, %d", count);
                char_elem_result = (esp_gattc_char_elem_t *)malloc(sizeof(esp_gattc_char_elem_t) * count);
                
                if (!char_elem_result){
                    ESP_LOGE(GATTC_TAG, "gattc no mem");
                }else{


                    status = esp_ble_gattc_get_char_by_uuid( gattc_if,
                                                             p_data->search_cmpl.conn_id,
                                                             gl_profile_tab[PROFILE_A_APP_ID].service_start_handle,
                                                             gl_profile_tab[PROFILE_A_APP_ID].service_end_handle,
                                                             auth_char_uuid,
                                                             char_elem_result,
                                                             &count);
                    
                    if (status != ESP_GATT_OK){
                        ESP_LOGE(GATTC_TAG, "esp_ble_gattc_get_char_by_uuid error");
                    }
                    else{                        
                        for(int i=0;i < count;i++){
                            if((char_elem_result[i].uuid.len==ESP_UUID_LEN_16)&&(char_elem_result[i].uuid.uuid.uuid16==REMOTE_AUTH_CHAR_UUID)&& char_elem_result[i].properties & ESP_GATT_CHAR_PROP_BIT_WRITE){
                                
                                ESP_LOGI(GATTC_TAG, "found Auth char. writing to: %04X", char_elem_result[i].uuid.uuid.uuid16);

                                char auth_value[] = {0x2, 0x1, 0x00, 0x00, 0x00, 0x00, 0x00};
                                if(esp_ble_gattc_write_char(gattc_if, p_data->search_cmpl.conn_id, char_elem_result[i].char_handle, sizeof(auth_value), &auth_value, ESP_GATT_WRITE_TYPE_RSP, ESP_GATT_AUTH_REQ_NONE)==ESP_OK){
                                    ESP_LOGI(GATTC_TAG, "Write successful");
                                }
                                else{
                                    ESP_LOGE(GATTC_TAG, "Write error");
                                }
                                break;
                            }
                        }
                    }

                    status = esp_ble_gattc_get_char_by_uuid( gattc_if,
                                                             p_data->search_cmpl.conn_id,
                                                             gl_profile_tab[PROFILE_A_APP_ID].service_start_handle,
                                                             gl_profile_tab[PROFILE_A_APP_ID].service_end_handle,
                                                             data_char_uuid,
                                                             char_elem_result,
                                                             &count);
                                        
                    
                    if (status != ESP_GATT_OK){
                        ESP_LOGE(GATTC_TAG, "esp_ble_gattc_get_char_by_uuid error");
                    }
                    else{                        
                        for(int i=0;i < count;i++){
                            if((char_elem_result[i].uuid.len==ESP_UUID_LEN_16)&&(char_elem_result[i].uuid.uuid.uuid16==REMOTE_DATA_CHAR_UUID) && (char_elem_result[i].properties & ESP_GATT_CHAR_PROP_BIT_NOTIFY)){                                
                                gl_profile_tab[PROFILE_A_APP_ID].char_handle = char_elem_result[0].char_handle;
                                esp_ble_gattc_register_for_notify (gattc_if, gl_profile_tab[PROFILE_A_APP_ID].remote_bda, char_elem_result[0].char_handle);
                            }
                        }
                    }
                    /*if (count > 0 && (char_elem_result[0].properties & ESP_GATT_CHAR_PROP_BIT_NOTIFY)){
                        gl_profile_tab[PROFILE_A_APP_ID].char_handle = char_elem_result[0].char_handle;
                        esp_ble_gattc_register_for_notify (gattc_if, gl_profile_tab[PROFILE_A_APP_ID].remote_bda, char_elem_result[0].char_handle);
                    }*/
                }
                /* free char_elem_result */
                free(char_elem_result);
            }else{
                ESP_LOGE(GATTC_TAG, "no char found");
            }
        }
         break;